          -- Read Mask
        lab <= x"00000002";
        wait for clk_period;
        assert db(21 downto 0) = "11" & x"FFFF000"(19 downto 0) report "Mask read error" severity error;
        
        -- Read Index/Status
        lab <= x"00000003";
        wait for clk_period;
        assert db(31 downto 27) = "11100" and db(15 downto 0) = x"1234" 
            report "Index/Status read error" severity error;

        -- 3. Test address translation (CS=1)
        report "Testing address translation";
        cs <= '1';  -- Translation mode
        
        -- Valid access (within Segment 0)
        lab <= x"00400800";  -- Logical address
        wait for clk_period;
        assert pab = "00" & x"80000800" report "Translation error" severity error;
        assert fault = '0' report "Unexpected fault" severity error;
        
        -- Invalid access (no segment match)
        lab <= x"12345678";
        wait for clk_period;
        assert fault = '1' report "Missing segfault" severity error;

        -- 4. Test protection fault (write to RO segment)
        report "Testing protection fault";
        lab <= x"00400800";  -- Valid address
        rw <= '0';           -- Write attempt
        wait for clk_period;
        assert fault = '1' report "Missing protfault" severity error;



            --Procedure: Reset
    --Initialize the Seg Regs
    --report "DB" severity warning;
    IF (RESET = '1') THEN
        MMU_SEG_ONE(PHYSICAL_ADDRESS_INDEX) <= PHYSICAL_BASE_ALIGNED_ONE;
        MMU_SEG_ONE(LOGICAL_ADDRESS_INDEX) <= LOGICAL_BASE_ONE;
        MMU_SEG_ONE(MASK_INDEX) <= LAB_MASK;
        MMU_SEG_ONE(INDEX_STATUS_INDEX) <= DEFAULT_INDEX_STATUS;     

        MMU_SEG_TWO(PHYSICAL_ADDRESS_INDEX) <= PHYSICAL_BASE_ALIGNED_TWO;
        MMU_SEG_TWO(LOGICAL_ADDRESS_INDEX) <= LOGICAL_BASE_TWO;
        MMU_SEG_TWO(MASK_INDEX) <= LAB_MASK;
        MMU_SEG_TWO(INDEX_STATUS_INDEX) <= DEFAULT_INDEX_STATUS;  

        MMU_SEG_THREE(PHYSICAL_ADDRESS_INDEX) <= PHYSICAL_BASE_ALIGNED_THREE;
        MMU_SEG_THREE(LOGICAL_ADDRESS_INDEX) <= LOGICAL_BASE_THREE;
        MMU_SEG_THREE(MASK_INDEX) <= LAB_MASK;
        MMU_SEG_THREE(INDEX_STATUS_INDEX) <= DEFAULT_INDEX_STATUS;  

        MMU_SEG_FOUR(PHYSICAL_ADDRESS_INDEX) <= PHYSICAL_BASE_ALIGNED_FOUR;
        MMU_SEG_FOUR(LOGICAL_ADDRESS_INDEX) <= LOGICAL_BASE_FOUR;
        MMU_SEG_FOUR(MASK_INDEX) <= LAB_MASK;
        MMU_SEG_FOUR(INDEX_STATUS_INDEX) <= DEFAULT_INDEX_STATUS;      
    ELSE
    END IF;